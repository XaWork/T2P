// Generated by Dagger (https://dagger.dev).
package me.taste2plate.app.customer.viewmodels;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;
import me.taste2plate.app.customer.repo.CheckoutRepository;
import me.taste2plate.app.customer.repo.CustomRepository;
import me.taste2plate.app.customer.repo.CustomerRepository;
import me.taste2plate.app.customer.repo.OrderRepository;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class CheckoutViewModel_Factory implements Factory<CheckoutViewModel> {
  private final Provider<CheckoutRepository> checkoutRepositoryProvider;

  private final Provider<OrderRepository> orderRepositoryProvider;

  private final Provider<CustomerRepository> customerRepositoryProvider;

  private final Provider<CustomRepository> customRepositorProvider;

  public CheckoutViewModel_Factory(Provider<CheckoutRepository> checkoutRepositoryProvider,
      Provider<OrderRepository> orderRepositoryProvider,
      Provider<CustomerRepository> customerRepositoryProvider,
      Provider<CustomRepository> customRepositorProvider) {
    this.checkoutRepositoryProvider = checkoutRepositoryProvider;
    this.orderRepositoryProvider = orderRepositoryProvider;
    this.customerRepositoryProvider = customerRepositoryProvider;
    this.customRepositorProvider = customRepositorProvider;
  }

  @Override
  public CheckoutViewModel get() {
    return newInstance(checkoutRepositoryProvider.get(), orderRepositoryProvider.get(), customerRepositoryProvider.get(), customRepositorProvider.get());
  }

  public static CheckoutViewModel_Factory create(
      Provider<CheckoutRepository> checkoutRepositoryProvider,
      Provider<OrderRepository> orderRepositoryProvider,
      Provider<CustomerRepository> customerRepositoryProvider,
      Provider<CustomRepository> customRepositorProvider) {
    return new CheckoutViewModel_Factory(checkoutRepositoryProvider, orderRepositoryProvider, customerRepositoryProvider, customRepositorProvider);
  }

  public static CheckoutViewModel newInstance(CheckoutRepository checkoutRepository,
      OrderRepository orderRepository, CustomerRepository customerRepository,
      CustomRepository customRepositor) {
    return new CheckoutViewModel(checkoutRepository, orderRepository, customerRepository, customRepositor);
  }
}
