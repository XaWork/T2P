// Generated by Dagger (https://dagger.dev).
package me.taste2plate.app.customer.updated_flow;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;
import me.taste2plate.app.customer.repo.CustomRepository;
import me.taste2plate.app.customer.repo.ProductRepository;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class CheckoutViewModel_Factory implements Factory<CheckoutViewModel> {
  private final Provider<ProductRepository> productRepositoryProvider;

  private final Provider<CustomRepository> customRepositoryProvider;

  public CheckoutViewModel_Factory(Provider<ProductRepository> productRepositoryProvider,
      Provider<CustomRepository> customRepositoryProvider) {
    this.productRepositoryProvider = productRepositoryProvider;
    this.customRepositoryProvider = customRepositoryProvider;
  }

  @Override
  public CheckoutViewModel get() {
    return newInstance(productRepositoryProvider.get(), customRepositoryProvider.get());
  }

  public static CheckoutViewModel_Factory create(
      Provider<ProductRepository> productRepositoryProvider,
      Provider<CustomRepository> customRepositoryProvider) {
    return new CheckoutViewModel_Factory(productRepositoryProvider, customRepositoryProvider);
  }

  public static CheckoutViewModel newInstance(ProductRepository productRepository,
      CustomRepository customRepository) {
    return new CheckoutViewModel(productRepository, customRepository);
  }
}
