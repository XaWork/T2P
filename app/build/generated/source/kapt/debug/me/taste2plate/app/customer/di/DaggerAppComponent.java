// Generated by Dagger (https://dagger.dev).
package me.taste2plate.app.customer.di;

import androidx.lifecycle.ViewModel;
import com.google.common.collect.ImmutableMap;
import com.google.errorprone.annotations.CanIgnoreReturnValue;
import com.google.firebase.firestore.CollectionReference;
import com.google.firebase.storage.StorageReference;
import dagger.android.AndroidInjector;
import dagger.android.DaggerApplication;
import dagger.android.DaggerApplication_MembersInjector;
import dagger.android.DispatchingAndroidInjector;
import dagger.android.DispatchingAndroidInjector_Factory;
import dagger.android.support.DaggerAppCompatActivity_MembersInjector;
import dagger.internal.DaggerGenerated;
import dagger.internal.DoubleCheck;
import dagger.internal.MapProviderFactory;
import dagger.internal.Preconditions;
import java.util.Map;
import javax.inject.Provider;
import me.taste2plate.app.Woocommerce;
import me.taste2plate.app.customer.SplashActivity;
import me.taste2plate.app.customer.WcApp;
import me.taste2plate.app.customer.common.BaseActivity_MembersInjector;
import me.taste2plate.app.customer.repo.CartRepository;
import me.taste2plate.app.customer.repo.CartRepository_Factory;
import me.taste2plate.app.customer.repo.CategoryRepository;
import me.taste2plate.app.customer.repo.CategoryRepository_Factory;
import me.taste2plate.app.customer.repo.CheckoutRepository;
import me.taste2plate.app.customer.repo.CheckoutRepository_Factory;
import me.taste2plate.app.customer.repo.CustomRepository;
import me.taste2plate.app.customer.repo.CustomRepository_Factory;
import me.taste2plate.app.customer.repo.CustomerRepository;
import me.taste2plate.app.customer.repo.CustomerRepository_Factory;
import me.taste2plate.app.customer.repo.FirebaseUserRepository;
import me.taste2plate.app.customer.repo.FirebaseUserRepository_Factory;
import me.taste2plate.app.customer.repo.OrderRepository;
import me.taste2plate.app.customer.repo.OrderRepository_Factory;
import me.taste2plate.app.customer.repo.ProductRepository;
import me.taste2plate.app.customer.repo.ProductRepository_Factory;
import me.taste2plate.app.customer.ui.checkout.CheckoutActivity;
import me.taste2plate.app.customer.ui.coupon.AllOffersActivity;
import me.taste2plate.app.customer.ui.coupon.DealsNComboListActivity;
import me.taste2plate.app.customer.ui.customer.AddNewAddressActivity;
import me.taste2plate.app.customer.ui.customer.AddressListActivity;
import me.taste2plate.app.customer.ui.customer.BasicCustomerDetailsActivity;
import me.taste2plate.app.customer.ui.customer.BillingAddressActivity;
import me.taste2plate.app.customer.ui.customer.BulkOrderActivity;
import me.taste2plate.app.customer.ui.customer.DirectFromHomeActivity;
import me.taste2plate.app.customer.ui.customer.ProfileActivity;
import me.taste2plate.app.customer.ui.customer.ShippingAddressActivity;
import me.taste2plate.app.customer.ui.home.HomeActivity;
import me.taste2plate.app.customer.ui.landing.DashboardActivity;
import me.taste2plate.app.customer.ui.landing.DetailsActivity;
import me.taste2plate.app.customer.ui.location.TrackLocationActivity;
import me.taste2plate.app.customer.ui.membership.MembershipListActivity;
import me.taste2plate.app.customer.ui.membership.MembershipListViewModel;
import me.taste2plate.app.customer.ui.membership.MembershipListViewModel_Factory;
import me.taste2plate.app.customer.ui.membership.MyPlanActivity;
import me.taste2plate.app.customer.ui.membership.MyPlanViewModel;
import me.taste2plate.app.customer.ui.membership.MyPlanViewModel_Factory;
import me.taste2plate.app.customer.ui.offers.OffersActivity;
import me.taste2plate.app.customer.ui.onboarding.AnonymousSignInActivity;
import me.taste2plate.app.customer.ui.onboarding.OnBoardActivity;
import me.taste2plate.app.customer.ui.order.MyOrdersActivity;
import me.taste2plate.app.customer.ui.order.OrderActivity;
import me.taste2plate.app.customer.ui.order.OrderConfirmationActivity;
import me.taste2plate.app.customer.ui.product.CartActivity;
import me.taste2plate.app.customer.ui.product.CategoryActivity;
import me.taste2plate.app.customer.ui.product.CityBrandActivity;
import me.taste2plate.app.customer.ui.product.ProductActivity;
import me.taste2plate.app.customer.ui.product.ProductSearchActivity;
import me.taste2plate.app.customer.ui.product.ShopActivity;
import me.taste2plate.app.customer.ui.product.SubCategoryActivity;
import me.taste2plate.app.customer.ui.product.WishlistActivity;
import me.taste2plate.app.customer.ui.rewards.RewardActivity;
import me.taste2plate.app.customer.ui.rewards.RewardViewModel;
import me.taste2plate.app.customer.ui.rewards.RewardViewModel_Factory;
import me.taste2plate.app.customer.ui.wallet.WalletActivity;
import me.taste2plate.app.customer.ui.wallet.WalletViewModel;
import me.taste2plate.app.customer.ui.wallet.WalletViewModel_Factory;
import me.taste2plate.app.customer.utils.ViewModelFactory;
import me.taste2plate.app.customer.utils.ViewModelFactory_Factory;
import me.taste2plate.app.customer.viewmodels.CartViewModel;
import me.taste2plate.app.customer.viewmodels.CartViewModel_Factory;
import me.taste2plate.app.customer.viewmodels.CategoryViewModel;
import me.taste2plate.app.customer.viewmodels.CategoryViewModel_Factory;
import me.taste2plate.app.customer.viewmodels.CheckoutViewModel;
import me.taste2plate.app.customer.viewmodels.CheckoutViewModel_Factory;
import me.taste2plate.app.customer.viewmodels.CustomerViewModel;
import me.taste2plate.app.customer.viewmodels.CustomerViewModel_Factory;
import me.taste2plate.app.customer.viewmodels.OrderViewModel;
import me.taste2plate.app.customer.viewmodels.OrderViewModel_Factory;
import me.taste2plate.app.customer.viewmodels.ProductViewModel;
import me.taste2plate.app.customer.viewmodels.ProductViewModel_Factory;
import me.taste2plate.app.customer.viewmodels.ReviewViewModel;
import me.taste2plate.app.customer.viewmodels.ReviewViewModel_Factory;
import me.taste2plate.app.customer.viewmodels.UserViewModel;
import me.taste2plate.app.customer.viewmodels.UserViewModel_Factory;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerAppComponent implements AppComponent {
  private Provider<ActivitiesModule_ContributesMainActivity$app_debug.SplashActivitySubcomponent.Factory> splashActivitySubcomponentFactoryProvider;

  private Provider<ActivitiesModule_ContributesDashboardActivity$app_debug.DashboardActivitySubcomponent.Factory> dashboardActivitySubcomponentFactoryProvider;

  private Provider<ActivitiesModule_ContributesDetailsActivity$app_debug.DetailsActivitySubcomponent.Factory> detailsActivitySubcomponentFactoryProvider;

  private Provider<ActivitiesModule_ContributesShopActivity$app_debug.ShopActivitySubcomponent.Factory> shopActivitySubcomponentFactoryProvider;

  private Provider<ActivitiesModule_ContributesProductActivity$app_debug.ProductActivitySubcomponent.Factory> productActivitySubcomponentFactoryProvider;

  private Provider<ActivitiesModule_ContributesHomeActivity$app_debug.HomeActivitySubcomponent.Factory> homeActivitySubcomponentFactoryProvider;

  private Provider<ActivitiesModule_ContributesOnbaordActivity$app_debug.OnBoardActivitySubcomponent.Factory> onBoardActivitySubcomponentFactoryProvider;

  private Provider<ActivitiesModule_ContributesBasicCustomerDetailsActivity$app_debug.BasicCustomerDetailsActivitySubcomponent.Factory> basicCustomerDetailsActivitySubcomponentFactoryProvider;

  private Provider<ActivitiesModule_ContributesBillingAddressActivity$app_debug.BillingAddressActivitySubcomponent.Factory> billingAddressActivitySubcomponentFactoryProvider;

  private Provider<ActivitiesModule_ContributesShippingAddressActivity$app_debug.ShippingAddressActivitySubcomponent.Factory> shippingAddressActivitySubcomponentFactoryProvider;

  private Provider<ActivitiesModule_ContributesCartActivity$app_debug.CartActivitySubcomponent.Factory> cartActivitySubcomponentFactoryProvider;

  private Provider<ActivitiesModule_ContributesWishlistActivity$app_debug.WishlistActivitySubcomponent.Factory> wishlistActivitySubcomponentFactoryProvider;

  private Provider<ActivitiesModule_ContributesSubCategoryActivity$app_debug.SubCategoryActivitySubcomponent.Factory> subCategoryActivitySubcomponentFactoryProvider;

  private Provider<ActivitiesModule_ContributesCheckOutActivity$app_debug.CheckoutActivitySubcomponent.Factory> checkoutActivitySubcomponentFactoryProvider;

  private Provider<ActivitiesModule_ContributesProfileActivity$app_debug.ProfileActivitySubcomponent.Factory> profileActivitySubcomponentFactoryProvider;

  private Provider<ActivitiesModule_ContributesAnonymousSignInActivity$app_debug.AnonymousSignInActivitySubcomponent.Factory> anonymousSignInActivitySubcomponentFactoryProvider;

  private Provider<ActivitiesModule_ContributesMyOrdersActivity$app_debug.MyOrdersActivitySubcomponent.Factory> myOrdersActivitySubcomponentFactoryProvider;

  private Provider<ActivitiesModule_ContributesOrderActivity$app_debug.OrderActivitySubcomponent.Factory> orderActivitySubcomponentFactoryProvider;

  private Provider<ActivitiesModule_ContributesProductSearchActivity$app_debug.ProductSearchActivitySubcomponent.Factory> productSearchActivitySubcomponentFactoryProvider;

  private Provider<ActivitiesModule_ContributesCityBrandActivity$app_debug.CityBrandActivitySubcomponent.Factory> cityBrandActivitySubcomponentFactoryProvider;

  private Provider<ActivitiesModule_ContributesCategoryActivity$app_debug.CategoryActivitySubcomponent.Factory> categoryActivitySubcomponentFactoryProvider;

  private Provider<ActivitiesModule_ContributesBulkOrderActivity$app_debug.BulkOrderActivitySubcomponent.Factory> bulkOrderActivitySubcomponentFactoryProvider;

  private Provider<ActivitiesModule_ContributesDirectFromHomeActivity$app_debug.DirectFromHomeActivitySubcomponent.Factory> directFromHomeActivitySubcomponentFactoryProvider;

  private Provider<ActivitiesModule_ContributesAddressListActivity$app_debug.AddressListActivitySubcomponent.Factory> addressListActivitySubcomponentFactoryProvider;

  private Provider<ActivitiesModule_ContributesAddNewAddressActivity$app_debug.AddNewAddressActivitySubcomponent.Factory> addNewAddressActivitySubcomponentFactoryProvider;

  private Provider<ActivitiesModule_ContributesTrackLocationActivity$app_debug.TrackLocationActivitySubcomponent.Factory> trackLocationActivitySubcomponentFactoryProvider;

  private Provider<ActivitiesModule_ContributesAllOffersActivity$app_debug.AllOffersActivitySubcomponent.Factory> allOffersActivitySubcomponentFactoryProvider;

  private Provider<ActivitiesModule_ContributesDealsNComboListActivity$app_debug.DealsNComboListActivitySubcomponent.Factory> dealsNComboListActivitySubcomponentFactoryProvider;

  private Provider<ActivitiesModule_ContributesMembershipListActivity$app_debug.MembershipListActivitySubcomponent.Factory> membershipListActivitySubcomponentFactoryProvider;

  private Provider<ActivitiesModule_ContributesWalletActivity$app_debug.WalletActivitySubcomponent.Factory> walletActivitySubcomponentFactoryProvider;

  private Provider<ActivitiesModule_ContributesMyPlanActivity$app_debug.MyPlanActivitySubcomponent.Factory> myPlanActivitySubcomponentFactoryProvider;

  private Provider<ActivitiesModule_ContributesRewardActivity$app_debug.RewardActivitySubcomponent.Factory> rewardActivitySubcomponentFactoryProvider;

  private Provider<ActivitiesModule_ContributesCheckout$app_debug.CheckoutActivitySubcomponent.Factory> checkoutActivitySubcomponentFactoryProvider2;

  private Provider<ActivitiesModule_ContributesOrderConfirmation$app_debug.OrderConfirmationActivitySubcomponent.Factory> orderConfirmationActivitySubcomponentFactoryProvider;

  private Provider<ActivitiesModule_ContributesOffersActivity$app_debug.OffersActivitySubcomponent.Factory> offersActivitySubcomponentFactoryProvider;

  private Provider<CollectionReference> providesUsersProvider;

  private Provider<StorageReference> providesStorageProvider;

  private Provider<FirebaseUserRepository> firebaseUserRepositoryProvider;

  private Provider<Woocommerce> providesWoocommerce$app_debugProvider;

  private Provider<CustomerRepository> customerRepositoryProvider;

  private Provider<CustomRepository> customRepositoryProvider;

  private Provider<UserViewModel> userViewModelProvider;

  private Provider<ProductRepository> productRepositoryProvider;

  private Provider<OrderRepository> orderRepositoryProvider;

  private Provider<CartRepository> cartRepositoryProvider;

  private Provider<CategoryRepository> categoryRepositoryProvider;

  private Provider<ProductViewModel> productViewModelProvider;

  private Provider<CategoryViewModel> categoryViewModelProvider;

  private Provider<CustomerViewModel> customerViewModelProvider;

  private Provider<CartViewModel> cartViewModelProvider;

  private Provider<CheckoutRepository> checkoutRepositoryProvider;

  private Provider<CheckoutViewModel> checkoutViewModelProvider;

  private Provider<OrderViewModel> orderViewModelProvider;

  private Provider<ReviewViewModel> reviewViewModelProvider;

  private Provider<me.taste2plate.app.customer.updated_flow.CheckoutViewModel> checkoutViewModelProvider2;

  private Provider<MembershipListViewModel> membershipListViewModelProvider;

  private Provider<MyPlanViewModel> myPlanViewModelProvider;

  private Provider<RewardViewModel> rewardViewModelProvider;

  private Provider<WalletViewModel> walletViewModelProvider;

  private Provider<Map<Class<? extends ViewModel>, Provider<ViewModel>>> mapOfClassOfAndProviderOfViewModelProvider;

  private Provider<ViewModelFactory> viewModelFactoryProvider;

  private DaggerAppComponent(FirebaseModule firebaseModuleParam, AppModule appModuleParam) {

    initialize(firebaseModuleParam, appModuleParam);
  }

  public static Builder builder() {
    return new Builder();
  }

  public static AppComponent create() {
    return new Builder().build();
  }

  private Map<Class<?>, Provider<AndroidInjector.Factory<?>>> mapOfClassOfAndProviderOfAndroidInjectorFactoryOf(
      ) {
    return ImmutableMap.<Class<?>, Provider<AndroidInjector.Factory<?>>>builderWithExpectedSize(35).put(SplashActivity.class, (Provider) splashActivitySubcomponentFactoryProvider).put(DashboardActivity.class, (Provider) dashboardActivitySubcomponentFactoryProvider).put(DetailsActivity.class, (Provider) detailsActivitySubcomponentFactoryProvider).put(ShopActivity.class, (Provider) shopActivitySubcomponentFactoryProvider).put(ProductActivity.class, (Provider) productActivitySubcomponentFactoryProvider).put(HomeActivity.class, (Provider) homeActivitySubcomponentFactoryProvider).put(OnBoardActivity.class, (Provider) onBoardActivitySubcomponentFactoryProvider).put(BasicCustomerDetailsActivity.class, (Provider) basicCustomerDetailsActivitySubcomponentFactoryProvider).put(BillingAddressActivity.class, (Provider) billingAddressActivitySubcomponentFactoryProvider).put(ShippingAddressActivity.class, (Provider) shippingAddressActivitySubcomponentFactoryProvider).put(CartActivity.class, (Provider) cartActivitySubcomponentFactoryProvider).put(WishlistActivity.class, (Provider) wishlistActivitySubcomponentFactoryProvider).put(SubCategoryActivity.class, (Provider) subCategoryActivitySubcomponentFactoryProvider).put(CheckoutActivity.class, (Provider) checkoutActivitySubcomponentFactoryProvider).put(ProfileActivity.class, (Provider) profileActivitySubcomponentFactoryProvider).put(AnonymousSignInActivity.class, (Provider) anonymousSignInActivitySubcomponentFactoryProvider).put(MyOrdersActivity.class, (Provider) myOrdersActivitySubcomponentFactoryProvider).put(OrderActivity.class, (Provider) orderActivitySubcomponentFactoryProvider).put(ProductSearchActivity.class, (Provider) productSearchActivitySubcomponentFactoryProvider).put(CityBrandActivity.class, (Provider) cityBrandActivitySubcomponentFactoryProvider).put(CategoryActivity.class, (Provider) categoryActivitySubcomponentFactoryProvider).put(BulkOrderActivity.class, (Provider) bulkOrderActivitySubcomponentFactoryProvider).put(DirectFromHomeActivity.class, (Provider) directFromHomeActivitySubcomponentFactoryProvider).put(AddressListActivity.class, (Provider) addressListActivitySubcomponentFactoryProvider).put(AddNewAddressActivity.class, (Provider) addNewAddressActivitySubcomponentFactoryProvider).put(TrackLocationActivity.class, (Provider) trackLocationActivitySubcomponentFactoryProvider).put(AllOffersActivity.class, (Provider) allOffersActivitySubcomponentFactoryProvider).put(DealsNComboListActivity.class, (Provider) dealsNComboListActivitySubcomponentFactoryProvider).put(MembershipListActivity.class, (Provider) membershipListActivitySubcomponentFactoryProvider).put(WalletActivity.class, (Provider) walletActivitySubcomponentFactoryProvider).put(MyPlanActivity.class, (Provider) myPlanActivitySubcomponentFactoryProvider).put(RewardActivity.class, (Provider) rewardActivitySubcomponentFactoryProvider).put(me.taste2plate.app.customer.updated_flow.CheckoutActivity.class, (Provider) checkoutActivitySubcomponentFactoryProvider2).put(OrderConfirmationActivity.class, (Provider) orderConfirmationActivitySubcomponentFactoryProvider).put(OffersActivity.class, (Provider) offersActivitySubcomponentFactoryProvider).build();
  }

  private DispatchingAndroidInjector<Object> dispatchingAndroidInjectorOfObject() {
    return DispatchingAndroidInjector_Factory.newInstance(mapOfClassOfAndProviderOfAndroidInjectorFactoryOf(), ImmutableMap.<String, Provider<AndroidInjector.Factory<?>>>of());
  }

  @SuppressWarnings("unchecked")
  private void initialize(final FirebaseModule firebaseModuleParam,
      final AppModule appModuleParam) {
    this.splashActivitySubcomponentFactoryProvider = new Provider<ActivitiesModule_ContributesMainActivity$app_debug.SplashActivitySubcomponent.Factory>() {
      @Override
      public ActivitiesModule_ContributesMainActivity$app_debug.SplashActivitySubcomponent.Factory get(
          ) {
        return new SplashActivitySubcomponentFactory();
      }
    };
    this.dashboardActivitySubcomponentFactoryProvider = new Provider<ActivitiesModule_ContributesDashboardActivity$app_debug.DashboardActivitySubcomponent.Factory>() {
      @Override
      public ActivitiesModule_ContributesDashboardActivity$app_debug.DashboardActivitySubcomponent.Factory get(
          ) {
        return new DashboardActivitySubcomponentFactory();
      }
    };
    this.detailsActivitySubcomponentFactoryProvider = new Provider<ActivitiesModule_ContributesDetailsActivity$app_debug.DetailsActivitySubcomponent.Factory>() {
      @Override
      public ActivitiesModule_ContributesDetailsActivity$app_debug.DetailsActivitySubcomponent.Factory get(
          ) {
        return new DetailsActivitySubcomponentFactory();
      }
    };
    this.shopActivitySubcomponentFactoryProvider = new Provider<ActivitiesModule_ContributesShopActivity$app_debug.ShopActivitySubcomponent.Factory>() {
      @Override
      public ActivitiesModule_ContributesShopActivity$app_debug.ShopActivitySubcomponent.Factory get(
          ) {
        return new ShopActivitySubcomponentFactory();
      }
    };
    this.productActivitySubcomponentFactoryProvider = new Provider<ActivitiesModule_ContributesProductActivity$app_debug.ProductActivitySubcomponent.Factory>() {
      @Override
      public ActivitiesModule_ContributesProductActivity$app_debug.ProductActivitySubcomponent.Factory get(
          ) {
        return new ProductActivitySubcomponentFactory();
      }
    };
    this.homeActivitySubcomponentFactoryProvider = new Provider<ActivitiesModule_ContributesHomeActivity$app_debug.HomeActivitySubcomponent.Factory>() {
      @Override
      public ActivitiesModule_ContributesHomeActivity$app_debug.HomeActivitySubcomponent.Factory get(
          ) {
        return new HomeActivitySubcomponentFactory();
      }
    };
    this.onBoardActivitySubcomponentFactoryProvider = new Provider<ActivitiesModule_ContributesOnbaordActivity$app_debug.OnBoardActivitySubcomponent.Factory>() {
      @Override
      public ActivitiesModule_ContributesOnbaordActivity$app_debug.OnBoardActivitySubcomponent.Factory get(
          ) {
        return new OnBoardActivitySubcomponentFactory();
      }
    };
    this.basicCustomerDetailsActivitySubcomponentFactoryProvider = new Provider<ActivitiesModule_ContributesBasicCustomerDetailsActivity$app_debug.BasicCustomerDetailsActivitySubcomponent.Factory>() {
      @Override
      public ActivitiesModule_ContributesBasicCustomerDetailsActivity$app_debug.BasicCustomerDetailsActivitySubcomponent.Factory get(
          ) {
        return new BasicCustomerDetailsActivitySubcomponentFactory();
      }
    };
    this.billingAddressActivitySubcomponentFactoryProvider = new Provider<ActivitiesModule_ContributesBillingAddressActivity$app_debug.BillingAddressActivitySubcomponent.Factory>() {
      @Override
      public ActivitiesModule_ContributesBillingAddressActivity$app_debug.BillingAddressActivitySubcomponent.Factory get(
          ) {
        return new BillingAddressActivitySubcomponentFactory();
      }
    };
    this.shippingAddressActivitySubcomponentFactoryProvider = new Provider<ActivitiesModule_ContributesShippingAddressActivity$app_debug.ShippingAddressActivitySubcomponent.Factory>() {
      @Override
      public ActivitiesModule_ContributesShippingAddressActivity$app_debug.ShippingAddressActivitySubcomponent.Factory get(
          ) {
        return new ShippingAddressActivitySubcomponentFactory();
      }
    };
    this.cartActivitySubcomponentFactoryProvider = new Provider<ActivitiesModule_ContributesCartActivity$app_debug.CartActivitySubcomponent.Factory>() {
      @Override
      public ActivitiesModule_ContributesCartActivity$app_debug.CartActivitySubcomponent.Factory get(
          ) {
        return new CartActivitySubcomponentFactory();
      }
    };
    this.wishlistActivitySubcomponentFactoryProvider = new Provider<ActivitiesModule_ContributesWishlistActivity$app_debug.WishlistActivitySubcomponent.Factory>() {
      @Override
      public ActivitiesModule_ContributesWishlistActivity$app_debug.WishlistActivitySubcomponent.Factory get(
          ) {
        return new WishlistActivitySubcomponentFactory();
      }
    };
    this.subCategoryActivitySubcomponentFactoryProvider = new Provider<ActivitiesModule_ContributesSubCategoryActivity$app_debug.SubCategoryActivitySubcomponent.Factory>() {
      @Override
      public ActivitiesModule_ContributesSubCategoryActivity$app_debug.SubCategoryActivitySubcomponent.Factory get(
          ) {
        return new SubCategoryActivitySubcomponentFactory();
      }
    };
    this.checkoutActivitySubcomponentFactoryProvider = new Provider<ActivitiesModule_ContributesCheckOutActivity$app_debug.CheckoutActivitySubcomponent.Factory>() {
      @Override
      public ActivitiesModule_ContributesCheckOutActivity$app_debug.CheckoutActivitySubcomponent.Factory get(
          ) {
        return new AM_CCOA$__CheckoutActivitySubcomponentFactory();
      }
    };
    this.profileActivitySubcomponentFactoryProvider = new Provider<ActivitiesModule_ContributesProfileActivity$app_debug.ProfileActivitySubcomponent.Factory>() {
      @Override
      public ActivitiesModule_ContributesProfileActivity$app_debug.ProfileActivitySubcomponent.Factory get(
          ) {
        return new ProfileActivitySubcomponentFactory();
      }
    };
    this.anonymousSignInActivitySubcomponentFactoryProvider = new Provider<ActivitiesModule_ContributesAnonymousSignInActivity$app_debug.AnonymousSignInActivitySubcomponent.Factory>() {
      @Override
      public ActivitiesModule_ContributesAnonymousSignInActivity$app_debug.AnonymousSignInActivitySubcomponent.Factory get(
          ) {
        return new AnonymousSignInActivitySubcomponentFactory();
      }
    };
    this.myOrdersActivitySubcomponentFactoryProvider = new Provider<ActivitiesModule_ContributesMyOrdersActivity$app_debug.MyOrdersActivitySubcomponent.Factory>() {
      @Override
      public ActivitiesModule_ContributesMyOrdersActivity$app_debug.MyOrdersActivitySubcomponent.Factory get(
          ) {
        return new MyOrdersActivitySubcomponentFactory();
      }
    };
    this.orderActivitySubcomponentFactoryProvider = new Provider<ActivitiesModule_ContributesOrderActivity$app_debug.OrderActivitySubcomponent.Factory>() {
      @Override
      public ActivitiesModule_ContributesOrderActivity$app_debug.OrderActivitySubcomponent.Factory get(
          ) {
        return new OrderActivitySubcomponentFactory();
      }
    };
    this.productSearchActivitySubcomponentFactoryProvider = new Provider<ActivitiesModule_ContributesProductSearchActivity$app_debug.ProductSearchActivitySubcomponent.Factory>() {
      @Override
      public ActivitiesModule_ContributesProductSearchActivity$app_debug.ProductSearchActivitySubcomponent.Factory get(
          ) {
        return new ProductSearchActivitySubcomponentFactory();
      }
    };
    this.cityBrandActivitySubcomponentFactoryProvider = new Provider<ActivitiesModule_ContributesCityBrandActivity$app_debug.CityBrandActivitySubcomponent.Factory>() {
      @Override
      public ActivitiesModule_ContributesCityBrandActivity$app_debug.CityBrandActivitySubcomponent.Factory get(
          ) {
        return new CityBrandActivitySubcomponentFactory();
      }
    };
    this.categoryActivitySubcomponentFactoryProvider = new Provider<ActivitiesModule_ContributesCategoryActivity$app_debug.CategoryActivitySubcomponent.Factory>() {
      @Override
      public ActivitiesModule_ContributesCategoryActivity$app_debug.CategoryActivitySubcomponent.Factory get(
          ) {
        return new CategoryActivitySubcomponentFactory();
      }
    };
    this.bulkOrderActivitySubcomponentFactoryProvider = new Provider<ActivitiesModule_ContributesBulkOrderActivity$app_debug.BulkOrderActivitySubcomponent.Factory>() {
      @Override
      public ActivitiesModule_ContributesBulkOrderActivity$app_debug.BulkOrderActivitySubcomponent.Factory get(
          ) {
        return new BulkOrderActivitySubcomponentFactory();
      }
    };
    this.directFromHomeActivitySubcomponentFactoryProvider = new Provider<ActivitiesModule_ContributesDirectFromHomeActivity$app_debug.DirectFromHomeActivitySubcomponent.Factory>() {
      @Override
      public ActivitiesModule_ContributesDirectFromHomeActivity$app_debug.DirectFromHomeActivitySubcomponent.Factory get(
          ) {
        return new DirectFromHomeActivitySubcomponentFactory();
      }
    };
    this.addressListActivitySubcomponentFactoryProvider = new Provider<ActivitiesModule_ContributesAddressListActivity$app_debug.AddressListActivitySubcomponent.Factory>() {
      @Override
      public ActivitiesModule_ContributesAddressListActivity$app_debug.AddressListActivitySubcomponent.Factory get(
          ) {
        return new AddressListActivitySubcomponentFactory();
      }
    };
    this.addNewAddressActivitySubcomponentFactoryProvider = new Provider<ActivitiesModule_ContributesAddNewAddressActivity$app_debug.AddNewAddressActivitySubcomponent.Factory>() {
      @Override
      public ActivitiesModule_ContributesAddNewAddressActivity$app_debug.AddNewAddressActivitySubcomponent.Factory get(
          ) {
        return new AddNewAddressActivitySubcomponentFactory();
      }
    };
    this.trackLocationActivitySubcomponentFactoryProvider = new Provider<ActivitiesModule_ContributesTrackLocationActivity$app_debug.TrackLocationActivitySubcomponent.Factory>() {
      @Override
      public ActivitiesModule_ContributesTrackLocationActivity$app_debug.TrackLocationActivitySubcomponent.Factory get(
          ) {
        return new TrackLocationActivitySubcomponentFactory();
      }
    };
    this.allOffersActivitySubcomponentFactoryProvider = new Provider<ActivitiesModule_ContributesAllOffersActivity$app_debug.AllOffersActivitySubcomponent.Factory>() {
      @Override
      public ActivitiesModule_ContributesAllOffersActivity$app_debug.AllOffersActivitySubcomponent.Factory get(
          ) {
        return new AllOffersActivitySubcomponentFactory();
      }
    };
    this.dealsNComboListActivitySubcomponentFactoryProvider = new Provider<ActivitiesModule_ContributesDealsNComboListActivity$app_debug.DealsNComboListActivitySubcomponent.Factory>() {
      @Override
      public ActivitiesModule_ContributesDealsNComboListActivity$app_debug.DealsNComboListActivitySubcomponent.Factory get(
          ) {
        return new DealsNComboListActivitySubcomponentFactory();
      }
    };
    this.membershipListActivitySubcomponentFactoryProvider = new Provider<ActivitiesModule_ContributesMembershipListActivity$app_debug.MembershipListActivitySubcomponent.Factory>() {
      @Override
      public ActivitiesModule_ContributesMembershipListActivity$app_debug.MembershipListActivitySubcomponent.Factory get(
          ) {
        return new MembershipListActivitySubcomponentFactory();
      }
    };
    this.walletActivitySubcomponentFactoryProvider = new Provider<ActivitiesModule_ContributesWalletActivity$app_debug.WalletActivitySubcomponent.Factory>() {
      @Override
      public ActivitiesModule_ContributesWalletActivity$app_debug.WalletActivitySubcomponent.Factory get(
          ) {
        return new WalletActivitySubcomponentFactory();
      }
    };
    this.myPlanActivitySubcomponentFactoryProvider = new Provider<ActivitiesModule_ContributesMyPlanActivity$app_debug.MyPlanActivitySubcomponent.Factory>() {
      @Override
      public ActivitiesModule_ContributesMyPlanActivity$app_debug.MyPlanActivitySubcomponent.Factory get(
          ) {
        return new MyPlanActivitySubcomponentFactory();
      }
    };
    this.rewardActivitySubcomponentFactoryProvider = new Provider<ActivitiesModule_ContributesRewardActivity$app_debug.RewardActivitySubcomponent.Factory>() {
      @Override
      public ActivitiesModule_ContributesRewardActivity$app_debug.RewardActivitySubcomponent.Factory get(
          ) {
        return new RewardActivitySubcomponentFactory();
      }
    };
    this.checkoutActivitySubcomponentFactoryProvider2 = new Provider<ActivitiesModule_ContributesCheckout$app_debug.CheckoutActivitySubcomponent.Factory>() {
      @Override
      public ActivitiesModule_ContributesCheckout$app_debug.CheckoutActivitySubcomponent.Factory get(
          ) {
        return new AM_CC$__CheckoutActivitySubcomponentFactory();
      }
    };
    this.orderConfirmationActivitySubcomponentFactoryProvider = new Provider<ActivitiesModule_ContributesOrderConfirmation$app_debug.OrderConfirmationActivitySubcomponent.Factory>() {
      @Override
      public ActivitiesModule_ContributesOrderConfirmation$app_debug.OrderConfirmationActivitySubcomponent.Factory get(
          ) {
        return new OrderConfirmationActivitySubcomponentFactory();
      }
    };
    this.offersActivitySubcomponentFactoryProvider = new Provider<ActivitiesModule_ContributesOffersActivity$app_debug.OffersActivitySubcomponent.Factory>() {
      @Override
      public ActivitiesModule_ContributesOffersActivity$app_debug.OffersActivitySubcomponent.Factory get(
          ) {
        return new OffersActivitySubcomponentFactory();
      }
    };
    this.providesUsersProvider = DoubleCheck.provider(FirebaseModule_ProvidesUsersFactory.create(firebaseModuleParam));
    this.providesStorageProvider = DoubleCheck.provider(FirebaseModule_ProvidesStorageFactory.create(firebaseModuleParam));
    this.firebaseUserRepositoryProvider = FirebaseUserRepository_Factory.create(providesUsersProvider, providesStorageProvider);
    this.providesWoocommerce$app_debugProvider = DoubleCheck.provider(AppModule_ProvidesWoocommerce$app_debugFactory.create(appModuleParam));
    this.customerRepositoryProvider = CustomerRepository_Factory.create(providesWoocommerce$app_debugProvider);
    this.customRepositoryProvider = CustomRepository_Factory.create(providesWoocommerce$app_debugProvider);
    this.userViewModelProvider = UserViewModel_Factory.create(firebaseUserRepositoryProvider, customerRepositoryProvider, customRepositoryProvider);
    this.productRepositoryProvider = ProductRepository_Factory.create(providesWoocommerce$app_debugProvider);
    this.orderRepositoryProvider = OrderRepository_Factory.create(providesWoocommerce$app_debugProvider);
    this.cartRepositoryProvider = CartRepository_Factory.create(providesWoocommerce$app_debugProvider);
    this.categoryRepositoryProvider = CategoryRepository_Factory.create(providesWoocommerce$app_debugProvider);
    this.productViewModelProvider = ProductViewModel_Factory.create(productRepositoryProvider, orderRepositoryProvider, cartRepositoryProvider, categoryRepositoryProvider, customRepositoryProvider);
    this.categoryViewModelProvider = CategoryViewModel_Factory.create(categoryRepositoryProvider);
    this.customerViewModelProvider = CustomerViewModel_Factory.create(customerRepositoryProvider, customRepositoryProvider);
    this.cartViewModelProvider = CartViewModel_Factory.create(cartRepositoryProvider, orderRepositoryProvider, customerRepositoryProvider, productRepositoryProvider);
    this.checkoutRepositoryProvider = CheckoutRepository_Factory.create(providesWoocommerce$app_debugProvider);
    this.checkoutViewModelProvider = CheckoutViewModel_Factory.create(checkoutRepositoryProvider, orderRepositoryProvider, customerRepositoryProvider, customRepositoryProvider);
    this.orderViewModelProvider = OrderViewModel_Factory.create(orderRepositoryProvider, productRepositoryProvider, customRepositoryProvider);
    this.reviewViewModelProvider = ReviewViewModel_Factory.create(productRepositoryProvider);
    this.checkoutViewModelProvider2 = me.taste2plate.app.customer.updated_flow.CheckoutViewModel_Factory.create(productRepositoryProvider, customRepositoryProvider);
    this.membershipListViewModelProvider = MembershipListViewModel_Factory.create(productRepositoryProvider);
    this.myPlanViewModelProvider = MyPlanViewModel_Factory.create(productRepositoryProvider);
    this.rewardViewModelProvider = RewardViewModel_Factory.create(customRepositoryProvider);
    this.walletViewModelProvider = WalletViewModel_Factory.create(productRepositoryProvider);
    this.mapOfClassOfAndProviderOfViewModelProvider = MapProviderFactory.<Class<? extends ViewModel>, ViewModel>builder(13).put(UserViewModel.class, (Provider) userViewModelProvider).put(ProductViewModel.class, (Provider) productViewModelProvider).put(CategoryViewModel.class, (Provider) categoryViewModelProvider).put(CustomerViewModel.class, (Provider) customerViewModelProvider).put(CartViewModel.class, (Provider) cartViewModelProvider).put(CheckoutViewModel.class, (Provider) checkoutViewModelProvider).put(OrderViewModel.class, (Provider) orderViewModelProvider).put(ReviewViewModel.class, (Provider) reviewViewModelProvider).put(me.taste2plate.app.customer.updated_flow.CheckoutViewModel.class, (Provider) checkoutViewModelProvider2).put(MembershipListViewModel.class, (Provider) membershipListViewModelProvider).put(MyPlanViewModel.class, (Provider) myPlanViewModelProvider).put(RewardViewModel.class, (Provider) rewardViewModelProvider).put(WalletViewModel.class, (Provider) walletViewModelProvider).build();
    this.viewModelFactoryProvider = DoubleCheck.provider(ViewModelFactory_Factory.create(mapOfClassOfAndProviderOfViewModelProvider));
  }

  @Override
  public void inject(DaggerApplication arg0) {
    injectDaggerApplication(arg0);
  }

  @Override
  public void inject(WcApp app) {
    injectWcApp(app);
  }

  @CanIgnoreReturnValue
  private DaggerApplication injectDaggerApplication(DaggerApplication instance) {
    DaggerApplication_MembersInjector.injectAndroidInjector(instance, dispatchingAndroidInjectorOfObject());
    return instance;
  }

  @CanIgnoreReturnValue
  private WcApp injectWcApp(WcApp instance) {
    DaggerApplication_MembersInjector.injectAndroidInjector(instance, dispatchingAndroidInjectorOfObject());
    return instance;
  }

  public static final class Builder {
    private FirebaseModule firebaseModule;

    private AppModule appModule;

    private Builder() {
    }

    public Builder firebaseModule(FirebaseModule firebaseModule) {
      this.firebaseModule = Preconditions.checkNotNull(firebaseModule);
      return this;
    }

    public Builder appModule(AppModule appModule) {
      this.appModule = Preconditions.checkNotNull(appModule);
      return this;
    }

    public AppComponent build() {
      if (firebaseModule == null) {
        this.firebaseModule = new FirebaseModule();
      }
      if (appModule == null) {
        this.appModule = new AppModule();
      }
      return new DaggerAppComponent(firebaseModule, appModule);
    }
  }

  private final class SplashActivitySubcomponentFactory implements ActivitiesModule_ContributesMainActivity$app_debug.SplashActivitySubcomponent.Factory {
    @Override
    public ActivitiesModule_ContributesMainActivity$app_debug.SplashActivitySubcomponent create(
        SplashActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new SplashActivitySubcomponentImpl(arg0);
    }
  }

  private final class SplashActivitySubcomponentImpl implements ActivitiesModule_ContributesMainActivity$app_debug.SplashActivitySubcomponent {
    private SplashActivitySubcomponentImpl(SplashActivity arg0) {

    }

    @Override
    public void inject(SplashActivity arg0) {
      injectSplashActivity(arg0);
    }

    @CanIgnoreReturnValue
    private SplashActivity injectSplashActivity(SplashActivity instance) {
      DaggerAppCompatActivity_MembersInjector.injectAndroidInjector(instance, DaggerAppComponent.this.dispatchingAndroidInjectorOfObject());
      BaseActivity_MembersInjector.injectViewModelFactory(instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
      return instance;
    }
  }

  private final class DashboardActivitySubcomponentFactory implements ActivitiesModule_ContributesDashboardActivity$app_debug.DashboardActivitySubcomponent.Factory {
    @Override
    public ActivitiesModule_ContributesDashboardActivity$app_debug.DashboardActivitySubcomponent create(
        DashboardActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new DashboardActivitySubcomponentImpl(arg0);
    }
  }

  private final class DashboardActivitySubcomponentImpl implements ActivitiesModule_ContributesDashboardActivity$app_debug.DashboardActivitySubcomponent {
    private DashboardActivitySubcomponentImpl(DashboardActivity arg0) {

    }

    @Override
    public void inject(DashboardActivity arg0) {
      injectDashboardActivity(arg0);
    }

    @CanIgnoreReturnValue
    private DashboardActivity injectDashboardActivity(DashboardActivity instance) {
      DaggerAppCompatActivity_MembersInjector.injectAndroidInjector(instance, DaggerAppComponent.this.dispatchingAndroidInjectorOfObject());
      BaseActivity_MembersInjector.injectViewModelFactory(instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
      return instance;
    }
  }

  private final class DetailsActivitySubcomponentFactory implements ActivitiesModule_ContributesDetailsActivity$app_debug.DetailsActivitySubcomponent.Factory {
    @Override
    public ActivitiesModule_ContributesDetailsActivity$app_debug.DetailsActivitySubcomponent create(
        DetailsActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new DetailsActivitySubcomponentImpl(arg0);
    }
  }

  private final class DetailsActivitySubcomponentImpl implements ActivitiesModule_ContributesDetailsActivity$app_debug.DetailsActivitySubcomponent {
    private DetailsActivitySubcomponentImpl(DetailsActivity arg0) {

    }

    @Override
    public void inject(DetailsActivity arg0) {
      injectDetailsActivity(arg0);
    }

    @CanIgnoreReturnValue
    private DetailsActivity injectDetailsActivity(DetailsActivity instance) {
      DaggerAppCompatActivity_MembersInjector.injectAndroidInjector(instance, DaggerAppComponent.this.dispatchingAndroidInjectorOfObject());
      BaseActivity_MembersInjector.injectViewModelFactory(instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
      return instance;
    }
  }

  private final class ShopActivitySubcomponentFactory implements ActivitiesModule_ContributesShopActivity$app_debug.ShopActivitySubcomponent.Factory {
    @Override
    public ActivitiesModule_ContributesShopActivity$app_debug.ShopActivitySubcomponent create(
        ShopActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new ShopActivitySubcomponentImpl(arg0);
    }
  }

  private final class ShopActivitySubcomponentImpl implements ActivitiesModule_ContributesShopActivity$app_debug.ShopActivitySubcomponent {
    private ShopActivitySubcomponentImpl(ShopActivity arg0) {

    }

    @Override
    public void inject(ShopActivity arg0) {
      injectShopActivity(arg0);
    }

    @CanIgnoreReturnValue
    private ShopActivity injectShopActivity(ShopActivity instance) {
      DaggerAppCompatActivity_MembersInjector.injectAndroidInjector(instance, DaggerAppComponent.this.dispatchingAndroidInjectorOfObject());
      BaseActivity_MembersInjector.injectViewModelFactory(instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
      return instance;
    }
  }

  private final class ProductActivitySubcomponentFactory implements ActivitiesModule_ContributesProductActivity$app_debug.ProductActivitySubcomponent.Factory {
    @Override
    public ActivitiesModule_ContributesProductActivity$app_debug.ProductActivitySubcomponent create(
        ProductActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new ProductActivitySubcomponentImpl(arg0);
    }
  }

  private final class ProductActivitySubcomponentImpl implements ActivitiesModule_ContributesProductActivity$app_debug.ProductActivitySubcomponent {
    private ProductActivitySubcomponentImpl(ProductActivity arg0) {

    }

    @Override
    public void inject(ProductActivity arg0) {
      injectProductActivity(arg0);
    }

    @CanIgnoreReturnValue
    private ProductActivity injectProductActivity(ProductActivity instance) {
      DaggerAppCompatActivity_MembersInjector.injectAndroidInjector(instance, DaggerAppComponent.this.dispatchingAndroidInjectorOfObject());
      BaseActivity_MembersInjector.injectViewModelFactory(instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
      return instance;
    }
  }

  private final class HomeActivitySubcomponentFactory implements ActivitiesModule_ContributesHomeActivity$app_debug.HomeActivitySubcomponent.Factory {
    @Override
    public ActivitiesModule_ContributesHomeActivity$app_debug.HomeActivitySubcomponent create(
        HomeActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new HomeActivitySubcomponentImpl(arg0);
    }
  }

  private final class HomeActivitySubcomponentImpl implements ActivitiesModule_ContributesHomeActivity$app_debug.HomeActivitySubcomponent {
    private HomeActivitySubcomponentImpl(HomeActivity arg0) {

    }

    @Override
    public void inject(HomeActivity arg0) {
      injectHomeActivity(arg0);
    }

    @CanIgnoreReturnValue
    private HomeActivity injectHomeActivity(HomeActivity instance) {
      DaggerAppCompatActivity_MembersInjector.injectAndroidInjector(instance, DaggerAppComponent.this.dispatchingAndroidInjectorOfObject());
      BaseActivity_MembersInjector.injectViewModelFactory(instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
      return instance;
    }
  }

  private final class OnBoardActivitySubcomponentFactory implements ActivitiesModule_ContributesOnbaordActivity$app_debug.OnBoardActivitySubcomponent.Factory {
    @Override
    public ActivitiesModule_ContributesOnbaordActivity$app_debug.OnBoardActivitySubcomponent create(
        OnBoardActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new OnBoardActivitySubcomponentImpl(arg0);
    }
  }

  private final class OnBoardActivitySubcomponentImpl implements ActivitiesModule_ContributesOnbaordActivity$app_debug.OnBoardActivitySubcomponent {
    private OnBoardActivitySubcomponentImpl(OnBoardActivity arg0) {

    }

    @Override
    public void inject(OnBoardActivity arg0) {
      injectOnBoardActivity(arg0);
    }

    @CanIgnoreReturnValue
    private OnBoardActivity injectOnBoardActivity(OnBoardActivity instance) {
      DaggerAppCompatActivity_MembersInjector.injectAndroidInjector(instance, DaggerAppComponent.this.dispatchingAndroidInjectorOfObject());
      BaseActivity_MembersInjector.injectViewModelFactory(instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
      return instance;
    }
  }

  private final class BasicCustomerDetailsActivitySubcomponentFactory implements ActivitiesModule_ContributesBasicCustomerDetailsActivity$app_debug.BasicCustomerDetailsActivitySubcomponent.Factory {
    @Override
    public ActivitiesModule_ContributesBasicCustomerDetailsActivity$app_debug.BasicCustomerDetailsActivitySubcomponent create(
        BasicCustomerDetailsActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new BasicCustomerDetailsActivitySubcomponentImpl(arg0);
    }
  }

  private final class BasicCustomerDetailsActivitySubcomponentImpl implements ActivitiesModule_ContributesBasicCustomerDetailsActivity$app_debug.BasicCustomerDetailsActivitySubcomponent {
    private BasicCustomerDetailsActivitySubcomponentImpl(BasicCustomerDetailsActivity arg0) {

    }

    @Override
    public void inject(BasicCustomerDetailsActivity arg0) {
      injectBasicCustomerDetailsActivity(arg0);
    }

    @CanIgnoreReturnValue
    private BasicCustomerDetailsActivity injectBasicCustomerDetailsActivity(
        BasicCustomerDetailsActivity instance) {
      DaggerAppCompatActivity_MembersInjector.injectAndroidInjector(instance, DaggerAppComponent.this.dispatchingAndroidInjectorOfObject());
      BaseActivity_MembersInjector.injectViewModelFactory(instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
      return instance;
    }
  }

  private final class BillingAddressActivitySubcomponentFactory implements ActivitiesModule_ContributesBillingAddressActivity$app_debug.BillingAddressActivitySubcomponent.Factory {
    @Override
    public ActivitiesModule_ContributesBillingAddressActivity$app_debug.BillingAddressActivitySubcomponent create(
        BillingAddressActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new BillingAddressActivitySubcomponentImpl(arg0);
    }
  }

  private final class BillingAddressActivitySubcomponentImpl implements ActivitiesModule_ContributesBillingAddressActivity$app_debug.BillingAddressActivitySubcomponent {
    private BillingAddressActivitySubcomponentImpl(BillingAddressActivity arg0) {

    }

    @Override
    public void inject(BillingAddressActivity arg0) {
      injectBillingAddressActivity(arg0);
    }

    @CanIgnoreReturnValue
    private BillingAddressActivity injectBillingAddressActivity(BillingAddressActivity instance) {
      DaggerAppCompatActivity_MembersInjector.injectAndroidInjector(instance, DaggerAppComponent.this.dispatchingAndroidInjectorOfObject());
      BaseActivity_MembersInjector.injectViewModelFactory(instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
      return instance;
    }
  }

  private final class ShippingAddressActivitySubcomponentFactory implements ActivitiesModule_ContributesShippingAddressActivity$app_debug.ShippingAddressActivitySubcomponent.Factory {
    @Override
    public ActivitiesModule_ContributesShippingAddressActivity$app_debug.ShippingAddressActivitySubcomponent create(
        ShippingAddressActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new ShippingAddressActivitySubcomponentImpl(arg0);
    }
  }

  private final class ShippingAddressActivitySubcomponentImpl implements ActivitiesModule_ContributesShippingAddressActivity$app_debug.ShippingAddressActivitySubcomponent {
    private ShippingAddressActivitySubcomponentImpl(ShippingAddressActivity arg0) {

    }

    @Override
    public void inject(ShippingAddressActivity arg0) {
      injectShippingAddressActivity(arg0);
    }

    @CanIgnoreReturnValue
    private ShippingAddressActivity injectShippingAddressActivity(
        ShippingAddressActivity instance) {
      DaggerAppCompatActivity_MembersInjector.injectAndroidInjector(instance, DaggerAppComponent.this.dispatchingAndroidInjectorOfObject());
      BaseActivity_MembersInjector.injectViewModelFactory(instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
      return instance;
    }
  }

  private final class CartActivitySubcomponentFactory implements ActivitiesModule_ContributesCartActivity$app_debug.CartActivitySubcomponent.Factory {
    @Override
    public ActivitiesModule_ContributesCartActivity$app_debug.CartActivitySubcomponent create(
        CartActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new CartActivitySubcomponentImpl(arg0);
    }
  }

  private final class CartActivitySubcomponentImpl implements ActivitiesModule_ContributesCartActivity$app_debug.CartActivitySubcomponent {
    private CartActivitySubcomponentImpl(CartActivity arg0) {

    }

    @Override
    public void inject(CartActivity arg0) {
      injectCartActivity(arg0);
    }

    @CanIgnoreReturnValue
    private CartActivity injectCartActivity(CartActivity instance) {
      DaggerAppCompatActivity_MembersInjector.injectAndroidInjector(instance, DaggerAppComponent.this.dispatchingAndroidInjectorOfObject());
      BaseActivity_MembersInjector.injectViewModelFactory(instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
      return instance;
    }
  }

  private final class WishlistActivitySubcomponentFactory implements ActivitiesModule_ContributesWishlistActivity$app_debug.WishlistActivitySubcomponent.Factory {
    @Override
    public ActivitiesModule_ContributesWishlistActivity$app_debug.WishlistActivitySubcomponent create(
        WishlistActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new WishlistActivitySubcomponentImpl(arg0);
    }
  }

  private final class WishlistActivitySubcomponentImpl implements ActivitiesModule_ContributesWishlistActivity$app_debug.WishlistActivitySubcomponent {
    private WishlistActivitySubcomponentImpl(WishlistActivity arg0) {

    }

    @Override
    public void inject(WishlistActivity arg0) {
      injectWishlistActivity(arg0);
    }

    @CanIgnoreReturnValue
    private WishlistActivity injectWishlistActivity(WishlistActivity instance) {
      DaggerAppCompatActivity_MembersInjector.injectAndroidInjector(instance, DaggerAppComponent.this.dispatchingAndroidInjectorOfObject());
      BaseActivity_MembersInjector.injectViewModelFactory(instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
      return instance;
    }
  }

  private final class SubCategoryActivitySubcomponentFactory implements ActivitiesModule_ContributesSubCategoryActivity$app_debug.SubCategoryActivitySubcomponent.Factory {
    @Override
    public ActivitiesModule_ContributesSubCategoryActivity$app_debug.SubCategoryActivitySubcomponent create(
        SubCategoryActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new SubCategoryActivitySubcomponentImpl(arg0);
    }
  }

  private final class SubCategoryActivitySubcomponentImpl implements ActivitiesModule_ContributesSubCategoryActivity$app_debug.SubCategoryActivitySubcomponent {
    private SubCategoryActivitySubcomponentImpl(SubCategoryActivity arg0) {

    }

    @Override
    public void inject(SubCategoryActivity arg0) {
      injectSubCategoryActivity(arg0);
    }

    @CanIgnoreReturnValue
    private SubCategoryActivity injectSubCategoryActivity(SubCategoryActivity instance) {
      DaggerAppCompatActivity_MembersInjector.injectAndroidInjector(instance, DaggerAppComponent.this.dispatchingAndroidInjectorOfObject());
      BaseActivity_MembersInjector.injectViewModelFactory(instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
      return instance;
    }
  }

  private final class AM_CCOA$__CheckoutActivitySubcomponentFactory implements ActivitiesModule_ContributesCheckOutActivity$app_debug.CheckoutActivitySubcomponent.Factory {
    @Override
    public ActivitiesModule_ContributesCheckOutActivity$app_debug.CheckoutActivitySubcomponent create(
        CheckoutActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new AM_CCOA$__CheckoutActivitySubcomponentImpl(arg0);
    }
  }

  private final class AM_CCOA$__CheckoutActivitySubcomponentImpl implements ActivitiesModule_ContributesCheckOutActivity$app_debug.CheckoutActivitySubcomponent {
    private AM_CCOA$__CheckoutActivitySubcomponentImpl(CheckoutActivity arg0) {

    }

    @Override
    public void inject(CheckoutActivity arg0) {
      injectCheckoutActivity(arg0);
    }

    @CanIgnoreReturnValue
    private CheckoutActivity injectCheckoutActivity(CheckoutActivity instance) {
      DaggerAppCompatActivity_MembersInjector.injectAndroidInjector(instance, DaggerAppComponent.this.dispatchingAndroidInjectorOfObject());
      BaseActivity_MembersInjector.injectViewModelFactory(instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
      return instance;
    }
  }

  private final class ProfileActivitySubcomponentFactory implements ActivitiesModule_ContributesProfileActivity$app_debug.ProfileActivitySubcomponent.Factory {
    @Override
    public ActivitiesModule_ContributesProfileActivity$app_debug.ProfileActivitySubcomponent create(
        ProfileActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new ProfileActivitySubcomponentImpl(arg0);
    }
  }

  private final class ProfileActivitySubcomponentImpl implements ActivitiesModule_ContributesProfileActivity$app_debug.ProfileActivitySubcomponent {
    private ProfileActivitySubcomponentImpl(ProfileActivity arg0) {

    }

    @Override
    public void inject(ProfileActivity arg0) {
      injectProfileActivity(arg0);
    }

    @CanIgnoreReturnValue
    private ProfileActivity injectProfileActivity(ProfileActivity instance) {
      DaggerAppCompatActivity_MembersInjector.injectAndroidInjector(instance, DaggerAppComponent.this.dispatchingAndroidInjectorOfObject());
      BaseActivity_MembersInjector.injectViewModelFactory(instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
      return instance;
    }
  }

  private final class AnonymousSignInActivitySubcomponentFactory implements ActivitiesModule_ContributesAnonymousSignInActivity$app_debug.AnonymousSignInActivitySubcomponent.Factory {
    @Override
    public ActivitiesModule_ContributesAnonymousSignInActivity$app_debug.AnonymousSignInActivitySubcomponent create(
        AnonymousSignInActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new AnonymousSignInActivitySubcomponentImpl(arg0);
    }
  }

  private final class AnonymousSignInActivitySubcomponentImpl implements ActivitiesModule_ContributesAnonymousSignInActivity$app_debug.AnonymousSignInActivitySubcomponent {
    private AnonymousSignInActivitySubcomponentImpl(AnonymousSignInActivity arg0) {

    }

    @Override
    public void inject(AnonymousSignInActivity arg0) {
      injectAnonymousSignInActivity(arg0);
    }

    @CanIgnoreReturnValue
    private AnonymousSignInActivity injectAnonymousSignInActivity(
        AnonymousSignInActivity instance) {
      DaggerAppCompatActivity_MembersInjector.injectAndroidInjector(instance, DaggerAppComponent.this.dispatchingAndroidInjectorOfObject());
      BaseActivity_MembersInjector.injectViewModelFactory(instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
      return instance;
    }
  }

  private final class MyOrdersActivitySubcomponentFactory implements ActivitiesModule_ContributesMyOrdersActivity$app_debug.MyOrdersActivitySubcomponent.Factory {
    @Override
    public ActivitiesModule_ContributesMyOrdersActivity$app_debug.MyOrdersActivitySubcomponent create(
        MyOrdersActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new MyOrdersActivitySubcomponentImpl(arg0);
    }
  }

  private final class MyOrdersActivitySubcomponentImpl implements ActivitiesModule_ContributesMyOrdersActivity$app_debug.MyOrdersActivitySubcomponent {
    private MyOrdersActivitySubcomponentImpl(MyOrdersActivity arg0) {

    }

    @Override
    public void inject(MyOrdersActivity arg0) {
      injectMyOrdersActivity(arg0);
    }

    @CanIgnoreReturnValue
    private MyOrdersActivity injectMyOrdersActivity(MyOrdersActivity instance) {
      DaggerAppCompatActivity_MembersInjector.injectAndroidInjector(instance, DaggerAppComponent.this.dispatchingAndroidInjectorOfObject());
      BaseActivity_MembersInjector.injectViewModelFactory(instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
      return instance;
    }
  }

  private final class OrderActivitySubcomponentFactory implements ActivitiesModule_ContributesOrderActivity$app_debug.OrderActivitySubcomponent.Factory {
    @Override
    public ActivitiesModule_ContributesOrderActivity$app_debug.OrderActivitySubcomponent create(
        OrderActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new OrderActivitySubcomponentImpl(arg0);
    }
  }

  private final class OrderActivitySubcomponentImpl implements ActivitiesModule_ContributesOrderActivity$app_debug.OrderActivitySubcomponent {
    private OrderActivitySubcomponentImpl(OrderActivity arg0) {

    }

    @Override
    public void inject(OrderActivity arg0) {
      injectOrderActivity(arg0);
    }

    @CanIgnoreReturnValue
    private OrderActivity injectOrderActivity(OrderActivity instance) {
      DaggerAppCompatActivity_MembersInjector.injectAndroidInjector(instance, DaggerAppComponent.this.dispatchingAndroidInjectorOfObject());
      BaseActivity_MembersInjector.injectViewModelFactory(instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
      return instance;
    }
  }

  private final class ProductSearchActivitySubcomponentFactory implements ActivitiesModule_ContributesProductSearchActivity$app_debug.ProductSearchActivitySubcomponent.Factory {
    @Override
    public ActivitiesModule_ContributesProductSearchActivity$app_debug.ProductSearchActivitySubcomponent create(
        ProductSearchActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new ProductSearchActivitySubcomponentImpl(arg0);
    }
  }

  private final class ProductSearchActivitySubcomponentImpl implements ActivitiesModule_ContributesProductSearchActivity$app_debug.ProductSearchActivitySubcomponent {
    private ProductSearchActivitySubcomponentImpl(ProductSearchActivity arg0) {

    }

    @Override
    public void inject(ProductSearchActivity arg0) {
      injectProductSearchActivity(arg0);
    }

    @CanIgnoreReturnValue
    private ProductSearchActivity injectProductSearchActivity(ProductSearchActivity instance) {
      DaggerAppCompatActivity_MembersInjector.injectAndroidInjector(instance, DaggerAppComponent.this.dispatchingAndroidInjectorOfObject());
      BaseActivity_MembersInjector.injectViewModelFactory(instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
      return instance;
    }
  }

  private final class CityBrandActivitySubcomponentFactory implements ActivitiesModule_ContributesCityBrandActivity$app_debug.CityBrandActivitySubcomponent.Factory {
    @Override
    public ActivitiesModule_ContributesCityBrandActivity$app_debug.CityBrandActivitySubcomponent create(
        CityBrandActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new CityBrandActivitySubcomponentImpl(arg0);
    }
  }

  private final class CityBrandActivitySubcomponentImpl implements ActivitiesModule_ContributesCityBrandActivity$app_debug.CityBrandActivitySubcomponent {
    private CityBrandActivitySubcomponentImpl(CityBrandActivity arg0) {

    }

    @Override
    public void inject(CityBrandActivity arg0) {
      injectCityBrandActivity(arg0);
    }

    @CanIgnoreReturnValue
    private CityBrandActivity injectCityBrandActivity(CityBrandActivity instance) {
      DaggerAppCompatActivity_MembersInjector.injectAndroidInjector(instance, DaggerAppComponent.this.dispatchingAndroidInjectorOfObject());
      BaseActivity_MembersInjector.injectViewModelFactory(instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
      return instance;
    }
  }

  private final class CategoryActivitySubcomponentFactory implements ActivitiesModule_ContributesCategoryActivity$app_debug.CategoryActivitySubcomponent.Factory {
    @Override
    public ActivitiesModule_ContributesCategoryActivity$app_debug.CategoryActivitySubcomponent create(
        CategoryActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new CategoryActivitySubcomponentImpl(arg0);
    }
  }

  private final class CategoryActivitySubcomponentImpl implements ActivitiesModule_ContributesCategoryActivity$app_debug.CategoryActivitySubcomponent {
    private CategoryActivitySubcomponentImpl(CategoryActivity arg0) {

    }

    @Override
    public void inject(CategoryActivity arg0) {
      injectCategoryActivity(arg0);
    }

    @CanIgnoreReturnValue
    private CategoryActivity injectCategoryActivity(CategoryActivity instance) {
      DaggerAppCompatActivity_MembersInjector.injectAndroidInjector(instance, DaggerAppComponent.this.dispatchingAndroidInjectorOfObject());
      BaseActivity_MembersInjector.injectViewModelFactory(instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
      return instance;
    }
  }

  private final class BulkOrderActivitySubcomponentFactory implements ActivitiesModule_ContributesBulkOrderActivity$app_debug.BulkOrderActivitySubcomponent.Factory {
    @Override
    public ActivitiesModule_ContributesBulkOrderActivity$app_debug.BulkOrderActivitySubcomponent create(
        BulkOrderActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new BulkOrderActivitySubcomponentImpl(arg0);
    }
  }

  private final class BulkOrderActivitySubcomponentImpl implements ActivitiesModule_ContributesBulkOrderActivity$app_debug.BulkOrderActivitySubcomponent {
    private BulkOrderActivitySubcomponentImpl(BulkOrderActivity arg0) {

    }

    @Override
    public void inject(BulkOrderActivity arg0) {
      injectBulkOrderActivity(arg0);
    }

    @CanIgnoreReturnValue
    private BulkOrderActivity injectBulkOrderActivity(BulkOrderActivity instance) {
      DaggerAppCompatActivity_MembersInjector.injectAndroidInjector(instance, DaggerAppComponent.this.dispatchingAndroidInjectorOfObject());
      BaseActivity_MembersInjector.injectViewModelFactory(instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
      return instance;
    }
  }

  private final class DirectFromHomeActivitySubcomponentFactory implements ActivitiesModule_ContributesDirectFromHomeActivity$app_debug.DirectFromHomeActivitySubcomponent.Factory {
    @Override
    public ActivitiesModule_ContributesDirectFromHomeActivity$app_debug.DirectFromHomeActivitySubcomponent create(
        DirectFromHomeActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new DirectFromHomeActivitySubcomponentImpl(arg0);
    }
  }

  private final class DirectFromHomeActivitySubcomponentImpl implements ActivitiesModule_ContributesDirectFromHomeActivity$app_debug.DirectFromHomeActivitySubcomponent {
    private DirectFromHomeActivitySubcomponentImpl(DirectFromHomeActivity arg0) {

    }

    @Override
    public void inject(DirectFromHomeActivity arg0) {
      injectDirectFromHomeActivity(arg0);
    }

    @CanIgnoreReturnValue
    private DirectFromHomeActivity injectDirectFromHomeActivity(DirectFromHomeActivity instance) {
      DaggerAppCompatActivity_MembersInjector.injectAndroidInjector(instance, DaggerAppComponent.this.dispatchingAndroidInjectorOfObject());
      BaseActivity_MembersInjector.injectViewModelFactory(instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
      return instance;
    }
  }

  private final class AddressListActivitySubcomponentFactory implements ActivitiesModule_ContributesAddressListActivity$app_debug.AddressListActivitySubcomponent.Factory {
    @Override
    public ActivitiesModule_ContributesAddressListActivity$app_debug.AddressListActivitySubcomponent create(
        AddressListActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new AddressListActivitySubcomponentImpl(arg0);
    }
  }

  private final class AddressListActivitySubcomponentImpl implements ActivitiesModule_ContributesAddressListActivity$app_debug.AddressListActivitySubcomponent {
    private AddressListActivitySubcomponentImpl(AddressListActivity arg0) {

    }

    @Override
    public void inject(AddressListActivity arg0) {
      injectAddressListActivity(arg0);
    }

    @CanIgnoreReturnValue
    private AddressListActivity injectAddressListActivity(AddressListActivity instance) {
      DaggerAppCompatActivity_MembersInjector.injectAndroidInjector(instance, DaggerAppComponent.this.dispatchingAndroidInjectorOfObject());
      BaseActivity_MembersInjector.injectViewModelFactory(instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
      return instance;
    }
  }

  private final class AddNewAddressActivitySubcomponentFactory implements ActivitiesModule_ContributesAddNewAddressActivity$app_debug.AddNewAddressActivitySubcomponent.Factory {
    @Override
    public ActivitiesModule_ContributesAddNewAddressActivity$app_debug.AddNewAddressActivitySubcomponent create(
        AddNewAddressActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new AddNewAddressActivitySubcomponentImpl(arg0);
    }
  }

  private final class AddNewAddressActivitySubcomponentImpl implements ActivitiesModule_ContributesAddNewAddressActivity$app_debug.AddNewAddressActivitySubcomponent {
    private AddNewAddressActivitySubcomponentImpl(AddNewAddressActivity arg0) {

    }

    @Override
    public void inject(AddNewAddressActivity arg0) {
      injectAddNewAddressActivity(arg0);
    }

    @CanIgnoreReturnValue
    private AddNewAddressActivity injectAddNewAddressActivity(AddNewAddressActivity instance) {
      DaggerAppCompatActivity_MembersInjector.injectAndroidInjector(instance, DaggerAppComponent.this.dispatchingAndroidInjectorOfObject());
      BaseActivity_MembersInjector.injectViewModelFactory(instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
      return instance;
    }
  }

  private final class TrackLocationActivitySubcomponentFactory implements ActivitiesModule_ContributesTrackLocationActivity$app_debug.TrackLocationActivitySubcomponent.Factory {
    @Override
    public ActivitiesModule_ContributesTrackLocationActivity$app_debug.TrackLocationActivitySubcomponent create(
        TrackLocationActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new TrackLocationActivitySubcomponentImpl(arg0);
    }
  }

  private final class TrackLocationActivitySubcomponentImpl implements ActivitiesModule_ContributesTrackLocationActivity$app_debug.TrackLocationActivitySubcomponent {
    private TrackLocationActivitySubcomponentImpl(TrackLocationActivity arg0) {

    }

    @Override
    public void inject(TrackLocationActivity arg0) {
      injectTrackLocationActivity(arg0);
    }

    @CanIgnoreReturnValue
    private TrackLocationActivity injectTrackLocationActivity(TrackLocationActivity instance) {
      DaggerAppCompatActivity_MembersInjector.injectAndroidInjector(instance, DaggerAppComponent.this.dispatchingAndroidInjectorOfObject());
      BaseActivity_MembersInjector.injectViewModelFactory(instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
      return instance;
    }
  }

  private final class AllOffersActivitySubcomponentFactory implements ActivitiesModule_ContributesAllOffersActivity$app_debug.AllOffersActivitySubcomponent.Factory {
    @Override
    public ActivitiesModule_ContributesAllOffersActivity$app_debug.AllOffersActivitySubcomponent create(
        AllOffersActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new AllOffersActivitySubcomponentImpl(arg0);
    }
  }

  private final class AllOffersActivitySubcomponentImpl implements ActivitiesModule_ContributesAllOffersActivity$app_debug.AllOffersActivitySubcomponent {
    private AllOffersActivitySubcomponentImpl(AllOffersActivity arg0) {

    }

    @Override
    public void inject(AllOffersActivity arg0) {
      injectAllOffersActivity(arg0);
    }

    @CanIgnoreReturnValue
    private AllOffersActivity injectAllOffersActivity(AllOffersActivity instance) {
      DaggerAppCompatActivity_MembersInjector.injectAndroidInjector(instance, DaggerAppComponent.this.dispatchingAndroidInjectorOfObject());
      BaseActivity_MembersInjector.injectViewModelFactory(instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
      return instance;
    }
  }

  private final class DealsNComboListActivitySubcomponentFactory implements ActivitiesModule_ContributesDealsNComboListActivity$app_debug.DealsNComboListActivitySubcomponent.Factory {
    @Override
    public ActivitiesModule_ContributesDealsNComboListActivity$app_debug.DealsNComboListActivitySubcomponent create(
        DealsNComboListActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new DealsNComboListActivitySubcomponentImpl(arg0);
    }
  }

  private final class DealsNComboListActivitySubcomponentImpl implements ActivitiesModule_ContributesDealsNComboListActivity$app_debug.DealsNComboListActivitySubcomponent {
    private DealsNComboListActivitySubcomponentImpl(DealsNComboListActivity arg0) {

    }

    @Override
    public void inject(DealsNComboListActivity arg0) {
      injectDealsNComboListActivity(arg0);
    }

    @CanIgnoreReturnValue
    private DealsNComboListActivity injectDealsNComboListActivity(
        DealsNComboListActivity instance) {
      DaggerAppCompatActivity_MembersInjector.injectAndroidInjector(instance, DaggerAppComponent.this.dispatchingAndroidInjectorOfObject());
      BaseActivity_MembersInjector.injectViewModelFactory(instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
      return instance;
    }
  }

  private final class MembershipListActivitySubcomponentFactory implements ActivitiesModule_ContributesMembershipListActivity$app_debug.MembershipListActivitySubcomponent.Factory {
    @Override
    public ActivitiesModule_ContributesMembershipListActivity$app_debug.MembershipListActivitySubcomponent create(
        MembershipListActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new MembershipListActivitySubcomponentImpl(arg0);
    }
  }

  private final class MembershipListActivitySubcomponentImpl implements ActivitiesModule_ContributesMembershipListActivity$app_debug.MembershipListActivitySubcomponent {
    private MembershipListActivitySubcomponentImpl(MembershipListActivity arg0) {

    }

    @Override
    public void inject(MembershipListActivity arg0) {
      injectMembershipListActivity(arg0);
    }

    @CanIgnoreReturnValue
    private MembershipListActivity injectMembershipListActivity(MembershipListActivity instance) {
      DaggerAppCompatActivity_MembersInjector.injectAndroidInjector(instance, DaggerAppComponent.this.dispatchingAndroidInjectorOfObject());
      BaseActivity_MembersInjector.injectViewModelFactory(instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
      return instance;
    }
  }

  private final class WalletActivitySubcomponentFactory implements ActivitiesModule_ContributesWalletActivity$app_debug.WalletActivitySubcomponent.Factory {
    @Override
    public ActivitiesModule_ContributesWalletActivity$app_debug.WalletActivitySubcomponent create(
        WalletActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new WalletActivitySubcomponentImpl(arg0);
    }
  }

  private final class WalletActivitySubcomponentImpl implements ActivitiesModule_ContributesWalletActivity$app_debug.WalletActivitySubcomponent {
    private WalletActivitySubcomponentImpl(WalletActivity arg0) {

    }

    @Override
    public void inject(WalletActivity arg0) {
      injectWalletActivity(arg0);
    }

    @CanIgnoreReturnValue
    private WalletActivity injectWalletActivity(WalletActivity instance) {
      DaggerAppCompatActivity_MembersInjector.injectAndroidInjector(instance, DaggerAppComponent.this.dispatchingAndroidInjectorOfObject());
      BaseActivity_MembersInjector.injectViewModelFactory(instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
      return instance;
    }
  }

  private final class MyPlanActivitySubcomponentFactory implements ActivitiesModule_ContributesMyPlanActivity$app_debug.MyPlanActivitySubcomponent.Factory {
    @Override
    public ActivitiesModule_ContributesMyPlanActivity$app_debug.MyPlanActivitySubcomponent create(
        MyPlanActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new MyPlanActivitySubcomponentImpl(arg0);
    }
  }

  private final class MyPlanActivitySubcomponentImpl implements ActivitiesModule_ContributesMyPlanActivity$app_debug.MyPlanActivitySubcomponent {
    private MyPlanActivitySubcomponentImpl(MyPlanActivity arg0) {

    }

    @Override
    public void inject(MyPlanActivity arg0) {
      injectMyPlanActivity(arg0);
    }

    @CanIgnoreReturnValue
    private MyPlanActivity injectMyPlanActivity(MyPlanActivity instance) {
      DaggerAppCompatActivity_MembersInjector.injectAndroidInjector(instance, DaggerAppComponent.this.dispatchingAndroidInjectorOfObject());
      BaseActivity_MembersInjector.injectViewModelFactory(instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
      return instance;
    }
  }

  private final class RewardActivitySubcomponentFactory implements ActivitiesModule_ContributesRewardActivity$app_debug.RewardActivitySubcomponent.Factory {
    @Override
    public ActivitiesModule_ContributesRewardActivity$app_debug.RewardActivitySubcomponent create(
        RewardActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new RewardActivitySubcomponentImpl(arg0);
    }
  }

  private final class RewardActivitySubcomponentImpl implements ActivitiesModule_ContributesRewardActivity$app_debug.RewardActivitySubcomponent {
    private RewardActivitySubcomponentImpl(RewardActivity arg0) {

    }

    @Override
    public void inject(RewardActivity arg0) {
      injectRewardActivity(arg0);
    }

    @CanIgnoreReturnValue
    private RewardActivity injectRewardActivity(RewardActivity instance) {
      DaggerAppCompatActivity_MembersInjector.injectAndroidInjector(instance, DaggerAppComponent.this.dispatchingAndroidInjectorOfObject());
      BaseActivity_MembersInjector.injectViewModelFactory(instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
      return instance;
    }
  }

  private final class AM_CC$__CheckoutActivitySubcomponentFactory implements ActivitiesModule_ContributesCheckout$app_debug.CheckoutActivitySubcomponent.Factory {
    @Override
    public ActivitiesModule_ContributesCheckout$app_debug.CheckoutActivitySubcomponent create(
        me.taste2plate.app.customer.updated_flow.CheckoutActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new AM_CC$__CheckoutActivitySubcomponentImpl(arg0);
    }
  }

  private final class AM_CC$__CheckoutActivitySubcomponentImpl implements ActivitiesModule_ContributesCheckout$app_debug.CheckoutActivitySubcomponent {
    private AM_CC$__CheckoutActivitySubcomponentImpl(
        me.taste2plate.app.customer.updated_flow.CheckoutActivity arg0) {

    }

    @Override
    public void inject(me.taste2plate.app.customer.updated_flow.CheckoutActivity arg0) {
      injectCheckoutActivity(arg0);
    }

    @CanIgnoreReturnValue
    private me.taste2plate.app.customer.updated_flow.CheckoutActivity injectCheckoutActivity(
        me.taste2plate.app.customer.updated_flow.CheckoutActivity instance) {
      DaggerAppCompatActivity_MembersInjector.injectAndroidInjector(instance, DaggerAppComponent.this.dispatchingAndroidInjectorOfObject());
      BaseActivity_MembersInjector.injectViewModelFactory(instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
      return instance;
    }
  }

  private final class OrderConfirmationActivitySubcomponentFactory implements ActivitiesModule_ContributesOrderConfirmation$app_debug.OrderConfirmationActivitySubcomponent.Factory {
    @Override
    public ActivitiesModule_ContributesOrderConfirmation$app_debug.OrderConfirmationActivitySubcomponent create(
        OrderConfirmationActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new OrderConfirmationActivitySubcomponentImpl(arg0);
    }
  }

  private final class OrderConfirmationActivitySubcomponentImpl implements ActivitiesModule_ContributesOrderConfirmation$app_debug.OrderConfirmationActivitySubcomponent {
    private OrderConfirmationActivitySubcomponentImpl(OrderConfirmationActivity arg0) {

    }

    @Override
    public void inject(OrderConfirmationActivity arg0) {
      injectOrderConfirmationActivity(arg0);
    }

    @CanIgnoreReturnValue
    private OrderConfirmationActivity injectOrderConfirmationActivity(
        OrderConfirmationActivity instance) {
      DaggerAppCompatActivity_MembersInjector.injectAndroidInjector(instance, DaggerAppComponent.this.dispatchingAndroidInjectorOfObject());
      BaseActivity_MembersInjector.injectViewModelFactory(instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
      return instance;
    }
  }

  private final class OffersActivitySubcomponentFactory implements ActivitiesModule_ContributesOffersActivity$app_debug.OffersActivitySubcomponent.Factory {
    @Override
    public ActivitiesModule_ContributesOffersActivity$app_debug.OffersActivitySubcomponent create(
        OffersActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new OffersActivitySubcomponentImpl(arg0);
    }
  }

  private final class OffersActivitySubcomponentImpl implements ActivitiesModule_ContributesOffersActivity$app_debug.OffersActivitySubcomponent {
    private OffersActivitySubcomponentImpl(OffersActivity arg0) {

    }

    @Override
    public void inject(OffersActivity arg0) {
      injectOffersActivity(arg0);
    }

    @CanIgnoreReturnValue
    private OffersActivity injectOffersActivity(OffersActivity instance) {
      DaggerAppCompatActivity_MembersInjector.injectAndroidInjector(instance, DaggerAppComponent.this.dispatchingAndroidInjectorOfObject());
      BaseActivity_MembersInjector.injectViewModelFactory(instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
      return instance;
    }
  }
}
