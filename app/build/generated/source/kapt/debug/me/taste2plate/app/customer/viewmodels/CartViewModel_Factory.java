// Generated by Dagger (https://dagger.dev).
package me.taste2plate.app.customer.viewmodels;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;
import me.taste2plate.app.customer.repo.CartRepository;
import me.taste2plate.app.customer.repo.CustomerRepository;
import me.taste2plate.app.customer.repo.OrderRepository;
import me.taste2plate.app.customer.repo.ProductRepository;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class CartViewModel_Factory implements Factory<CartViewModel> {
  private final Provider<CartRepository> cartRepositoryProvider;

  private final Provider<OrderRepository> orderRepositoryProvider;

  private final Provider<CustomerRepository> customerRepositoryProvider;

  private final Provider<ProductRepository> productRepositoryProvider;

  public CartViewModel_Factory(Provider<CartRepository> cartRepositoryProvider,
      Provider<OrderRepository> orderRepositoryProvider,
      Provider<CustomerRepository> customerRepositoryProvider,
      Provider<ProductRepository> productRepositoryProvider) {
    this.cartRepositoryProvider = cartRepositoryProvider;
    this.orderRepositoryProvider = orderRepositoryProvider;
    this.customerRepositoryProvider = customerRepositoryProvider;
    this.productRepositoryProvider = productRepositoryProvider;
  }

  @Override
  public CartViewModel get() {
    return newInstance(cartRepositoryProvider.get(), orderRepositoryProvider.get(), customerRepositoryProvider.get(), productRepositoryProvider.get());
  }

  public static CartViewModel_Factory create(Provider<CartRepository> cartRepositoryProvider,
      Provider<OrderRepository> orderRepositoryProvider,
      Provider<CustomerRepository> customerRepositoryProvider,
      Provider<ProductRepository> productRepositoryProvider) {
    return new CartViewModel_Factory(cartRepositoryProvider, orderRepositoryProvider, customerRepositoryProvider, productRepositoryProvider);
  }

  public static CartViewModel newInstance(CartRepository cartRepository,
      OrderRepository orderRepository, CustomerRepository customerRepository,
      ProductRepository productRepository) {
    return new CartViewModel(cartRepository, orderRepository, customerRepository, productRepository);
  }
}
