// Generated by Dagger (https://dagger.dev).
package me.taste2plate.app.customer.viewmodels;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;
import me.taste2plate.app.customer.repo.CartRepository;
import me.taste2plate.app.customer.repo.CategoryRepository;
import me.taste2plate.app.customer.repo.CustomRepository;
import me.taste2plate.app.customer.repo.OrderRepository;
import me.taste2plate.app.customer.repo.ProductRepository;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class ProductViewModel_Factory implements Factory<ProductViewModel> {
  private final Provider<ProductRepository> productRepositoryProvider;

  private final Provider<OrderRepository> orderRepositoryProvider;

  private final Provider<CartRepository> cartRepositoryProvider;

  private final Provider<CategoryRepository> categoryRepositoryProvider;

  private final Provider<CustomRepository> customRepositoryProvider;

  public ProductViewModel_Factory(Provider<ProductRepository> productRepositoryProvider,
      Provider<OrderRepository> orderRepositoryProvider,
      Provider<CartRepository> cartRepositoryProvider,
      Provider<CategoryRepository> categoryRepositoryProvider,
      Provider<CustomRepository> customRepositoryProvider) {
    this.productRepositoryProvider = productRepositoryProvider;
    this.orderRepositoryProvider = orderRepositoryProvider;
    this.cartRepositoryProvider = cartRepositoryProvider;
    this.categoryRepositoryProvider = categoryRepositoryProvider;
    this.customRepositoryProvider = customRepositoryProvider;
  }

  @Override
  public ProductViewModel get() {
    return newInstance(productRepositoryProvider.get(), orderRepositoryProvider.get(), cartRepositoryProvider.get(), categoryRepositoryProvider.get(), customRepositoryProvider.get());
  }

  public static ProductViewModel_Factory create(
      Provider<ProductRepository> productRepositoryProvider,
      Provider<OrderRepository> orderRepositoryProvider,
      Provider<CartRepository> cartRepositoryProvider,
      Provider<CategoryRepository> categoryRepositoryProvider,
      Provider<CustomRepository> customRepositoryProvider) {
    return new ProductViewModel_Factory(productRepositoryProvider, orderRepositoryProvider, cartRepositoryProvider, categoryRepositoryProvider, customRepositoryProvider);
  }

  public static ProductViewModel newInstance(ProductRepository productRepository,
      OrderRepository orderRepository, CartRepository cartRepository,
      CategoryRepository categoryRepository, CustomRepository customRepository) {
    return new ProductViewModel(productRepository, orderRepository, cartRepository, categoryRepository, customRepository);
  }
}
