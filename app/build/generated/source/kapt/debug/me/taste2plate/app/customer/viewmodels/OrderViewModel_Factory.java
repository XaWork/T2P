// Generated by Dagger (https://dagger.dev).
package me.taste2plate.app.customer.viewmodels;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;
import me.taste2plate.app.customer.repo.CustomRepository;
import me.taste2plate.app.customer.repo.OrderRepository;
import me.taste2plate.app.customer.repo.ProductRepository;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class OrderViewModel_Factory implements Factory<OrderViewModel> {
  private final Provider<OrderRepository> orderRepositoryProvider;

  private final Provider<ProductRepository> productRepositoryProvider;

  private final Provider<CustomRepository> customRepositorProvider;

  public OrderViewModel_Factory(Provider<OrderRepository> orderRepositoryProvider,
      Provider<ProductRepository> productRepositoryProvider,
      Provider<CustomRepository> customRepositorProvider) {
    this.orderRepositoryProvider = orderRepositoryProvider;
    this.productRepositoryProvider = productRepositoryProvider;
    this.customRepositorProvider = customRepositorProvider;
  }

  @Override
  public OrderViewModel get() {
    return newInstance(orderRepositoryProvider.get(), productRepositoryProvider.get(), customRepositorProvider.get());
  }

  public static OrderViewModel_Factory create(Provider<OrderRepository> orderRepositoryProvider,
      Provider<ProductRepository> productRepositoryProvider,
      Provider<CustomRepository> customRepositorProvider) {
    return new OrderViewModel_Factory(orderRepositoryProvider, productRepositoryProvider, customRepositorProvider);
  }

  public static OrderViewModel newInstance(OrderRepository orderRepository,
      ProductRepository productRepository, CustomRepository customRepositor) {
    return new OrderViewModel(orderRepository, productRepository, customRepositor);
  }
}
